{"ast":null,"code":"var _jsxFileName = \"/Users/musubimanagement/Desktop/puzzle_block/Frontend/src/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Tile from \"./Tile\";\nimport { TILE_COUNT, GRID_SIZE, BOARD_SIZE } from \"./constants\";\nimport { canSwap, shuffle, swap, isSolved } from \"./helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    imgUrl\n  } = _ref;\n  const [tiles, setTiles] = useState([...Array(TILE_COUNT).keys()]);\n  const [isStarted, setIsStarted] = useState(false);\n\n  const shuffleTiles = () => {\n    const shuffledTiles = shuffle(tiles);\n    setTiles(shuffledTiles);\n  };\n\n  const swapTiles = tileIndex => {\n    if (canSwap(tileIndex, tiles.indexOf(tiles.length - 1))) {\n      const swappedTiles = swap(tiles, tileIndex, tiles.indexOf(tiles.length - 1));\n      setTiles(swappedTiles);\n    }\n  };\n\n  const handleTileClick = index => {\n    swapTiles(index);\n  };\n\n  const handleShuffleClick = () => {\n    shuffleTiles();\n  };\n\n  const handleStartClick = () => {\n    shuffleTiles();\n    setIsStarted(true);\n  };\n\n  const pieceWidth = Math.round(BOARD_SIZE / GRID_SIZE);\n  const pieceHeight = Math.round(BOARD_SIZE / GRID_SIZE);\n  const style = {\n    width: BOARD_SIZE,\n    height: BOARD_SIZE\n  };\n  const hasWon = isSolved(tiles);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      style: style,\n      className: \"board\",\n      children: tiles.map((tile, index) => /*#__PURE__*/_jsxDEV(Tile, {\n        index: index,\n        imgUrl: imgUrl,\n        tile: tile,\n        width: pieceWidth,\n        height: pieceHeight,\n        handleTileClick: handleTileClick\n      }, tile, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), hasWon && isStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Puzzle solved \\uD83E\\uDDE0 \\uD83C\\uDF89\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 31\n    }, this), !isStarted ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleStartClick(),\n      className: \"button-49\",\n      children: \"Start game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleShuffleClick(),\n      className: \"button-49\",\n      children: \"Restart game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Board, \"5+dhD0Wb6Y93+3dxRKkjziPlfbk=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/musubimanagement/Desktop/puzzle_block/Frontend/src/Board.js"],"names":["React","useState","Tile","TILE_COUNT","GRID_SIZE","BOARD_SIZE","canSwap","shuffle","swap","isSolved","Board","imgUrl","tiles","setTiles","Array","keys","isStarted","setIsStarted","shuffleTiles","shuffledTiles","swapTiles","tileIndex","indexOf","length","swappedTiles","handleTileClick","index","handleShuffleClick","handleStartClick","pieceWidth","Math","round","pieceHeight","style","width","height","hasWon","map","tile"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Tile from \"./Tile\";\nimport { TILE_COUNT, GRID_SIZE, BOARD_SIZE } from \"./constants\";\nimport { canSwap, shuffle, swap, isSolved } from \"./helpers\";\n\nfunction Board({ imgUrl }) {\n  const [tiles, setTiles] = useState([...Array(TILE_COUNT).keys()]);\n  const [isStarted, setIsStarted] = useState(false);\n\n  const shuffleTiles = () => {\n    const shuffledTiles = shuffle(tiles);\n    setTiles(shuffledTiles);\n  };\n\n  const swapTiles = (tileIndex) => {\n    if (canSwap(tileIndex, tiles.indexOf(tiles.length - 1))) {\n      const swappedTiles = swap(\n        tiles,\n        tileIndex,\n        tiles.indexOf(tiles.length - 1)\n      );\n      setTiles(swappedTiles);\n    }\n  };\n\n  const handleTileClick = (index) => {\n    swapTiles(index);\n  };\n\n  const handleShuffleClick = () => {\n    shuffleTiles();\n  };\n\n  const handleStartClick = () => {\n    shuffleTiles();\n    setIsStarted(true);\n  };\n\n  const pieceWidth = Math.round(BOARD_SIZE / GRID_SIZE);\n  const pieceHeight = Math.round(BOARD_SIZE / GRID_SIZE);\n  const style = {\n    width: BOARD_SIZE,\n    height: BOARD_SIZE,\n  };\n  const hasWon = isSolved(tiles);\n\n  return (\n    <>\n      <ul style={style} className=\"board\">\n        {tiles.map((tile, index) => (\n          <Tile\n            key={tile}\n            index={index}\n            imgUrl={imgUrl}\n            tile={tile}\n            width={pieceWidth}\n            height={pieceHeight}\n            handleTileClick={handleTileClick}\n          />\n        ))}\n      </ul>\n      {hasWon && isStarted && <div>Puzzle solved ðŸ§  ðŸŽ‰</div>}\n      {!isStarted ? (\n        <button onClick={() => handleStartClick()} className=\"button-49\">\n          Start game\n        </button>\n      ) : (\n        <button onClick={() => handleShuffleClick()} className=\"button-49\">\n          Restart game\n        </button>\n      )}\n    </>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}